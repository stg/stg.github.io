<html>
	<head>
		<title>LED Brightness-Matching Calculator</title>
		<script>

// Resistor series Exx tables
var exx_tab = [
	[    // E12
		100, 120, 150, 180, 220, 270, 330, 390, 470, 560, 680, 820
	], [ // E24
		100, 110, 120, 130, 150, 160, 180, 200, 220, 240, 270, 300,
		330, 360, 390, 430, 470, 510, 560, 620, 680, 750, 820, 910
	], [ // E48
		100, 105, 110, 115, 121, 127, 133, 140, 147, 154, 162, 169,
		178, 187, 196, 205, 215, 226, 237, 249, 261, 274, 287, 301,
		316, 332, 348, 365, 383, 402, 422, 442, 464, 487, 511, 536,
		562, 590, 619, 649, 681, 715, 750, 787, 825, 866, 909, 953
	], [ // E96
		100, 102, 105, 107, 110, 113, 115, 118, 121, 124, 127, 130,
		133, 137, 140, 143, 147, 150, 154, 158, 162, 165, 169, 174,
		178, 182, 187, 191, 196, 200, 205, 210, 216, 221, 226, 232,
		237, 243, 249, 255, 261, 267, 274, 280, 287, 294, 301, 309,
		316, 324, 332, 340, 348, 357, 365, 374, 383, 392, 402, 412,
		422, 432, 442, 453, 464, 475, 487, 499, 511, 523, 536, 549,
		562, 576, 590, 604, 619, 634, 649, 665, 681, 698, 715, 732,
		750, 768, 787, 806, 825, 845, 866, 887, 909, 931, 953, 976
	]
];

// Get element(s), array or single, with specified id
function elmById(id, single = false) {
	e = document.querySelectorAll("[id='"+id+"']");
	return single ? e[0] : e;
}

// Get float converted value(s), array or single, for input elements with specified id
function floatById(id, single = false) {
	f = Array.from(elmById(id)).map(e => parseFloat(e.value));
	return single ? f[0] : f;
}

// Get integer value of radio button selection with specified name
function radioByName(name) {
	return parseInt(Array.from(document.getElementsByName(name)).find((e) => e.checked).value);
}

// Expand resistor table to range from 1Ω-1MΩ and build SI-prefixed labels for each
function expandResistors(idx) {
	let resistors = [];
	if(idx < exx_tab.length) {
		for(let f = 0; f < 6; f++) {
			for(let n = 0; n < exx_tab[idx].length; n++) {
				let str = exx_tab[idx][n].toFixed(0);
				resistors.push([
					exx_tab[idx][n] * Math.pow(10, f) / 100,
					((f % 3) == 2 ? str : str.slice(0, (f % 3) + 1) + "." + str.slice((f % 3) + 1)) + (f > 2 ? (f > 5 ? "M" : "k") : "")
				]);
			}
		}
	}
	return resistors;
}

function calculate() {

	// Fetch all necessary fields
	let io = [ floatById("cd"), floatById("ma"), floatById("vf"), elmById("cn"), elmById("ro"), elmById("be"), elmById("fc"), elmById("fi") ];

	// Map to objects for readability, iterate
	io = io[0].map((_, idx) => ({
		intensity:       io[0][idx],
		current:         io[1][idx],
		voltage:         io[2][idx],
		colourName:      io[3][idx],
		resistorValue:   io[4][idx],
		intensityError:  io[5][idx],
		finalCurrent:    io[6][idx],
		finalIntensity:  io[7][idx],
		brightness:      0,
		error:           0
	}))

	// Fetch desired configuration
	let cfg = {
		target:    floatById("tv", true),
		voltage:   floatById("sv", true),
		resistors: expandResistors(radioByName("cs")),
		mode:      radioByName("tm")
	};

	// Update labels
	let table = elmById("config_table")[0].rows[0].cells[2].innerHTML = "Target " + (cfg.mode ? "Intensity <i>mcd</i>" : "Current <i>mA</i>");
		
	// Calculate brightness
	let brightness_min;
	io.forEach(io => {
		// Normalize brightness from intensity and current
		io.brightness = io.intensity / io.current;
		// Find the highest brightness
		brightness_min = brightness_min ? Math.min(brightness_min, io.brightness) : io.brightness;
	});

	io.forEach(io => {
		// Calculate required current
		let current = cfg.mode ? cfg.target / io.intensity * io.current : cfg.target / (io.brightness / brightness_min);
		// Calculate optimal resistor
		let resistance = (cfg.voltage - io.voltage) / (current / 1000);
		// Find best matching resistor
		let resistor = [ resistance, resistance.toFixed(0) ];
		if(cfg.resistors.length) resistor = cfg.resistors.reduce((a, b) => Math.abs(b[0] - resistance) < Math.abs(a[0] - resistance) ? b : a);
		io.resistorValue.innerHTML = resistor[1];
		// Calculate current with matching resistor
		let final_current = (cfg.voltage - io.voltage) / resistor[0];
		io.finalCurrent.innerHTML = (final_current * 1000).toFixed(2);
		// Calculate final intensity
		io.finalIntensity.innerHTML = (final_current / (io.current / 1000) * io.intensity).toFixed(1);
		// Calculate current error
		io.error = (1.0 - ((current / 1000) / final_current)) * 100;
	});

	// Calculate average error
	let average_error = io.map(e => e.error).reduce((a, b) => a + b) / io.length;

	io.forEach(io => {
		// Calculate required current
		let error = io.error - average_error;
		io.intensityError.innerHTML = (error < 0 ? "-" : "+") + Math.abs(error).toFixed(1);
	});

}

function remove_led(e) {
	// Remove the associated row from the table
	e.target.parentNode.parentNode.remove();
}

function show_remove(e) {
	e.currentTarget.cells[8].children[0].style.opacity=1;
}

function hide_remove(e) {
	e.currentTarget.cells[8].children[0].style.opacity=0;
}

function add_led(values=["","","",""]) {
	let table = elmById("led_table")[0];
	let row = table.insertRow(table.rows.length - 1);
	row.addEventListener("mouseover", show_remove);
	row.addEventListener("mouseout", hide_remove);
	for(let n = 0; n < 4; n++) {
		let cell = row.insertCell(n);
		let i = document.createElement("input");
		i.type = "text"; i.id = ["nm", "cd", "ma", "vf"][n]; i.value = values[n];
		cell.appendChild(i);
		
	}
	for(let n = 4; n < 8; n++) {
		let cell = row.insertCell(n);
		cell.id = ["ro", "fc", "fi", "be"][n - 4];
	}
	let cell = row.insertCell(8);
	let i = document.createElement("button");
	i.innerHTML = "Remove"
	i.style.width = "75px";
	i.id = "rr";
	i.style.opacity = 0;
	cell.appendChild(i);
	i.addEventListener("click", remove_led);
}

function clear_led() {
	// Find all remove buttons and "click" them
	let removers = elmById("rr");
	for(let n = 0; n < removers.length; n++) {
		removers[n].dispatchEvent(new Event('click'));
	}
	// Add an empty line to start fresh with
	add_led();
}

function init() {
	// Add example
	add_led(['150060YS75003',  '550', '20', '2.0']);
	add_led(['150060GS75003', '1600', '20', '3.2']);
	add_led(['150060RS75003',  '530', '20', '2.0']);
	// Listen to any change and calculate actively
	document.addEventListener('input', calculate);
	// Do the first calculation
	calculate();
}
		</script>
		<style>
			body {
				margin:10px;
			}
			.topic {
				position:relative;
				left:-10px;
				top:-10px;
				width:100%;
				padding: 12px 15px;
				margin-bottom:15px;
				font-size: 1.2em;
				font-family: sans-serif;
				font-weight: bold;
				min-width: 400px;
				box-shadow: 0 0 20px rgba(0, 0, 0, 0.55);
				background-color: #009879;
				color: #ffffff;

			}
			input[type=text] {
				width:110px;
				font-size: 0.9em;
				font-family: sans-serif;
			}
			button {
				width:110px;
				font-size: 0.9em;
				font-family: sans-serif;
				transition: opacity 0.5s;
			}
			input[type="radio"] {
				margin-top: -2px;
				vertical-align: middle;
			}
			.out {
				width:50px;
				border: 1px #cccccc solid;
				height:20px;
				display:inline-block;
				vertical-align: absmiddle;
			}
			
			.styled-table {
				border-collapse: collapse;
				margin: 25px 0;
				font-size: 0.9em;
				font-family: sans-serif;
				min-width: 400px;
				box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
			}
			.styled-table thead tr {
				background-color: #009879;
				color: #ffffff;
				text-align: left;
				font-weight: bold;
				
			}
			.styled-table th,
			.styled-table td {
				padding: 6px 15px;
			}
			.styled-table thead tr {
				padding: 12px 15px;
			}
			.styled-table tbody tr {
				border-bottom: 1px solid #dddddd;
			}

			.styled-table tbody tr:nth-of-type(even) {
				background-color: #f3f3f3;
			}

			.styled-table tbody tr:last-of-type {
				border-bottom: 2px solid #009879;
			}
			.styled-table tbody tr.active-row {
				font-weight: bold;
				color: #009879;
			}
			.styled-table .result {
				background-color: #007998;
			}
		</style>
	</head>
	<body onload="init();">

		<div class="topic">LED Brightness-Matching Calculator</div>
	
		This <b>LED calculator</b> will help you calculate the currents and resistor values you will need to brightness-match LEDs of <i>different colors</i>.<br/><br/>
		For example, you might be building a panel with multiple color indicators and you want their <b>perceived brightness</b> to be the same, or you are wiring up an RGB LED for white light.<br/><br/>
		Results are calculated based on the specified LED parameters in relation to the target (max) current or intensity (brightness).<br/>
		Since the current vs. intensity curve of the LEDs are not known and manufacturers differ, these values should be treated as <b>indicative and not final</b>.<br/>
		Best results are achieved when targetting currents at or near the rated current and using LEDs with similar optical characteristics<br/>
		<b>Results may still require fine tuning</b> to get perfect.<br/>.<br/>
		An example is prefilled when loading, <b>please press "Clear" to start from scratch</b><br/><br/>
			
		<table id="config_table" class="styled-table">
			<thead>
				<tr>
					<td>Source Voltage <i>V</i></td>
					<td>Target</td>
					<td>Target Intensity <i>mcd</i></td>
					<td>Resistor Series</td>
				</tr>
			</thead>
			<tr>
				<tr>
					<td><input type="text" id="sv" value="5.0"/></td>
					<td><input type="radio" name="tm" value="0"> Current <input type="radio" name="tm" value="1" checked> Intensity
					<td><input type="text" id="tv" value="25"/></td>
					<td><input type="radio" name="cs" value="0"> E12 <input type="radio" name="cs" value="1"> E24 <input type="radio" name="cs" value="2" checked> E48 <input type="radio" name="cs" value="3"> E96 <input type="radio" name="cs" value="4"> Exact</td>
				</tr>
			</tr>
		</table>
		
		<table id="led_table" class="styled-table">
			<thead>
				<tr>
					<!--td>#</td-->
					<td>Name</i></td>
					<td>Intensity <i>mcd</i></td>
					<td>at Current <i>mA</i></td>
					<td>Voltage (V<sub>F</sub>) <i>V</i></td>
					<td class="result">Resistor <i>Ω</i></td>
					<td class="result">Current <i>mA</i></td>
					<td class="result">Intensity <i>mcd</i></td>
					<td class="result">Error <i>%</i></td>
					<td class="result"></td>
				</tr>
			</thead>
			<tr>
				<td colspan="8"><button onclick="add_led()">Add LED</button></td>
				<td colspan="8"><button onclick="clear_led()" style="width:75px">Clear</button></td>
			</tr>
		</table>

		<br/>
		In this calculator I am, somewhat unscientifically, using <b>intensity</b> (referring to <b>luminous intensity</b>) and (perceived) <b>brightness</b> interchangably.<br/>
		It is designed primarily for LEDs being viewed directly (not used for illumination) and in this case it makes little sense to speak of brightness and intensity separately.<br/><br/>
		
		Some notes on terminology, LEDs and units:<br/><br/>
		<b>Photometry</b> is the science of measurement of light in terms of how it is <u>perceived by the average human eye</u>.<br/>
		&emsp;Such measurements are called <i>photometric</i> as opposed to <i>radiometric</i>, which instead represents actual, physical, energies.<br/><br/>
		
		<b>Brightness</b> is the <u>perception</u> elicited by the <i>luminance</i> of a visual target, meaning it is a <i>photometric</i> measurement.<br/>
		&emsp;This is a measure of what is perceived by an average human, regardless of other factors.<br/><br/>
		
		<b>Luminance</b> is the <i>photometric</i> measure of the <i>luminous intensity</i> per unit <u>area</u> of light in a given direction.<br/>
		&emsp;This means it can represent the light reflected off a surface, but also light in transit across an area.<br/><br/>
		
		<b>Luminous intensity</b> - the <u>wavelength weighted</u> (ie. <i>photometric</i>) power emitted by a light source <u>in a particular direction</u>.<br/>
		&emsp;This says nothing about the total amount of light, only how much is travelling in one specific direction.<br/><br/>
		
		<b>Candela</b> is the SI unit used to specify <i>luminous intensity</i>.<br/>
		&emsp;It is thus <i>photometric</i>, and measured <u>in a particular direction</u>.<br/><br/>
		
		LEDs are, by industry standard, specified in <i>candela</i> (<i>cd</i>), commonly <i>millicandela</i> (<i>mcd</i>) for small LEDs.<br/>
		Since <i>candela</i> is <i>photometric</i>, no such rating is provided for invisible light LEDs such as infra-red, ultra-violet or beyond.<br/>
		
		The direction chosen for the <i>luminous intensity</i> measurement is usually where it is the highest, the <u>peak</u> intensity.<br/>
		This direction is typically the <u>dead-center</u> of the intended direction for light emission.<br/><br/>
		The <u>viewing angle</u> specification tells you the number of degrees between the directions where <i>luminous intensity</i> is at <u>50%</u> of the specification.<br/><br/>
		
		This means that any given LED light source will have a <u>higher candela</u> rating, if provided with a lens to produce a <u>narrower viewing angle</u>.<br/>
		A <u>wider viewing angle</u> will subsequently result in a <u>lower candela</u> rating, even though the total amount of light emitted remains the same.<br/><br/>
		
		As such, <i>luminous intensity</i> is not a great measurement for illumination purposes, where the total amount of light provided is of high concern.<br/>
		When dealing with illuminating LEDs, LED modules or LED fixtures, the SI unit <i>lumen</i>, a measurement of <i>luminous flux</i>, is typically used instead.<br/><br/>
		For invisible light LEDs or LEDs designed for non-viewing purposes, the SI unit <i>watt</i>, a measurement of <i>radiant power/flux/energy</i>, is typically used.<br/><br/>
			
	</body>
</html>